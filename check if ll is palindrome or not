class Solution:
    
    def getMid(self,head):
        slow = head
        fast = head.next   #this is the main cache
        while(fast!=None and fast.next!=None):
            fast = fast.next.next
            slow = slow.next
            
        return slow
        
    def reverse(self,head):
        curr = head
        prev = None
        next = None
        
        while(curr!=None):
            next = curr.next
            curr.next = prev
            prev = curr
            curr = next
            
        return prev    
            
        
    def isPalindrome(self, head):
        
        if(head.next==None):
            return 1
        
        #step 1 : find middle
        middle = self.getMid(head)
        
        #step 2 : reverse list after mid
        temp = middle.next
        middle.next = self.reverse(temp)
        
        #step 3: compare both halves
        head1 = head
        head2 = middle.next
        
        while(head2!=None):
            if(head1.data != head2.data):
                return 0
            
            head1 = head1.next
            head2 = head2.next
        # step 4 : repeat step 2 (it is temporary)
        temp = middle.next
        middle.next = self.reverse(temp)
        return 1
       
        #code here
    #   n=0
    #     temp = head
    #     while(temp!=None):
    #         n+=1
    #         temp = temp.next
            
        
    #     arr = []
        
    #     temp = head
    #     while(temp!=None):
    #         arr.append(temp.data)
    #         temp = temp.next
            
    #     s=0
    #     e=n-1
    #     while(s<e):
    #         if(arr[s]!=arr[e]):
    #             return 0
    #         s+=1
    #         e-=1
        
    #     return 1   
        
